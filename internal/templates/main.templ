package templates

import (
	"bookify/internal/db"
	"strconv"
)

templ MainPage(accounts []db.Account, jobs []db.Job) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>Bookify - EPUB to KEPUB Converter</title>
			<script src="https://unpkg.com/htmx.org@1.9.10"></script>
			<script src="https://cdn.tailwindcss.com"></script>
		</head>
		<body class="bg-gray-100 min-h-screen">
			<div class="container mx-auto p-4 max-w-4xl">
				<header class="mb-8">
					<div class="flex justify-between items-center">
						<div>
							<h1 class="text-3xl font-bold text-gray-900">Bookify</h1>
							<p class="text-gray-600">Convert EPUB files to KEPUB format for Kobo devices</p>
						</div>
						<a
							href="/setup"
							class="bg-gray-500 hover:bg-gray-600 text-white font-medium py-2 px-4 rounded-md transition-colors"
						>
							Add Account
						</a>
					</div>
				</header>

				<!-- Upload Section -->
				<div class="bg-white rounded-lg shadow p-6 mb-6">
					<h2 class="text-xl font-bold mb-4">Upload Books</h2>
					<form
						id="upload-form"
						hx-post="/upload"
						hx-encoding="multipart/form-data"
						hx-target="#upload-response"
						hx-indicator="#upload-spinner"
						class="space-y-4"
					>
						<div>
							<label class="block text-sm font-medium text-gray-700 mb-2">Select Account</label>
							<select
								name="account_id"
								required
								class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
							>
								<option value="">Choose an account...</option>
								for _, account := range accounts {
									<option value={ strconv.Itoa(int(account.ID)) }>{ account.Name }</option>
								}
							</select>
						</div>

						<div>
							<label class="block text-sm font-medium text-gray-700 mb-2">EPUB Files</label>
							<div
								id="drop-zone"
								class="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-blue-400 transition-colors"
							>
								<input
									type="file"
									name="files"
									multiple
									accept=".epub"
									class="hidden"
									id="file-input"
								/>
								<div class="space-y-2">
									<svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
										<path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
									</svg>
									<div class="text-gray-600">
										<span class="font-medium text-blue-600 hover:text-blue-500 cursor-pointer" onclick="document.getElementById('file-input').click()">
											Choose files
										</span>
										or drag and drop
									</div>
									<p class="text-xs text-gray-500">EPUB files only</p>
								</div>
							</div>
							<div id="file-list" class="mt-2 space-y-1"></div>
						</div>

						<div class="flex items-center space-x-4">
							<button
								type="submit"
								class="bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-md transition-colors disabled:opacity-50"
								id="upload-btn"
							>
								Upload & Process
							</button>
							<div id="upload-spinner" class="htmx-indicator">
								<div class="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-500"></div>
							</div>
						</div>
					</form>
					<div id="upload-response" class="mt-4"></div>
				</div>

				<!-- Queue Section -->
				<div class="bg-white rounded-lg shadow p-6">
					<h2 class="text-xl font-bold mb-4">Processing Queue</h2>
					<div
						hx-get="/api/queue"
						hx-trigger="every 2s"
						hx-target="#queue-list"
						class="space-y-3"
					>
						<div id="queue-list">
							if len(jobs) == 0 {
								<p class="text-gray-500 text-center py-8">No jobs yet. Upload some books to get started!</p>
							} else {
								for _, job := range jobs {
									@JobCard(job)
								}
							}
						</div>
					</div>
				</div>
			</div>

			<script>
				// File drag and drop handling
				const dropZone = document.getElementById('drop-zone');
				const fileInput = document.getElementById('file-input');
				const fileList = document.getElementById('file-list');

				['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
					dropZone.addEventListener(eventName, preventDefaults, false);
				});

				function preventDefaults(e) {
					e.preventDefault();
					e.stopPropagation();
				}

				['dragenter', 'dragover'].forEach(eventName => {
					dropZone.addEventListener(eventName, highlight, false);
				});

				['dragleave', 'drop'].forEach(eventName => {
					dropZone.addEventListener(eventName, unhighlight, false);
				});

				function highlight(e) {
					dropZone.classList.add('border-blue-400', 'bg-blue-50');
				}

				function unhighlight(e) {
					dropZone.classList.remove('border-blue-400', 'bg-blue-50');
				}

				dropZone.addEventListener('drop', handleDrop, false);

				function handleDrop(e) {
					const dt = e.dataTransfer;
					const files = dt.files;
					fileInput.files = files;
					updateFileList(files);
				}

				fileInput.addEventListener('change', function(e) {
					updateFileList(e.target.files);
				});

				function updateFileList(files) {
					fileList.innerHTML = '';
					Array.from(files).forEach(file => {
						const div = document.createElement('div');
						div.className = 'text-sm text-gray-600 flex items-center space-x-2';
						div.innerHTML = `
							<svg class="h-4 w-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
								<path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4z" clip-rule="evenodd"></path>
							</svg>
							<span>${file.name}</span>
							<span class="text-gray-400">(${(file.size / 1024 / 1024).toFixed(1)} MB)</span>
						`;
						fileList.appendChild(div);
					});
				}
			</script>
		</body>
	</html>
}

templ JobCard(job db.Job) {
	<div class="border border-gray-200 rounded-lg p-4">
		<div class="flex items-center justify-between mb-2">
			<h3 class="font-medium text-gray-900">{ job.OriginalFilename }</h3>
			<span class={ "px-2 py-1 text-xs font-medium rounded-full",
				templ.KV("bg-yellow-100 text-yellow-800", job.Status == "queued" || job.Status == "processing"),
				templ.KV("bg-green-100 text-green-800", job.Status == "completed"),
				templ.KV("bg-red-100 text-red-800", job.Status == "failed") }>
				{ job.Status }
			</span>
		</div>

		<div class="text-sm text-gray-600 mb-2">
			<span class="font-medium">Account:</span> { job.Account.Name }
		</div>

		if job.Status == "processing" {
			<div class="mb-2">
				<div class="flex justify-between text-sm text-gray-600 mb-1">
					<span>{ job.Stage }</span>
					<span>{ strconv.Itoa(job.Progress) }%</span>
				</div>
				<div class="w-full bg-gray-200 rounded-full h-2">
					<div
						class="bg-blue-500 h-2 rounded-full transition-all duration-300"
						style={ "width: " + strconv.Itoa(job.Progress) + "%" }
					></div>
				</div>
			</div>
		}

		if job.Message != "" {
			<p class="text-sm text-gray-600 mb-2">{ job.Message }</p>
		}

		if job.Error != "" {
			<p class="text-sm text-red-600 mb-2">Error: { job.Error }</p>
		}

		if job.DriveURL != "" {
			<a
				href={ templ.URL(job.DriveURL) }
				target="_blank"
				class="inline-flex items-center text-sm text-blue-600 hover:text-blue-800"
			>
				<svg class="h-4 w-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
					<path d="M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z"></path>
					<path d="M5 5a2 2 0 00-2 2v8a2 2 0 002 2h8a2 2 0 002-2v-3a1 1 0 10-2 0v3H5V7h3a1 1 0 000-2H5z"></path>
				</svg>
				View in Google Drive
			</a>
		}

		<div class="text-xs text-gray-400 mt-2">
			Created: { job.CreatedAt.Format("Jan 2, 2006 3:04 PM") }
		</div>
	</div>
}

templ UploadError(message string) {
	<div class="p-3 bg-red-100 border border-red-400 text-red-700 rounded">
		{ message }
	</div>
}

templ UploadSuccess(message string) {
	<div class="p-3 bg-green-100 border border-green-400 text-green-700 rounded">
		{ message }
	</div>
}
